// MainActivity.kt
package com.example.mathsolver

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.input.TextFieldValue
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.mathsolver.ui.theme.MathSolverTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MathSolverTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    MathSolverUI()
                }
            }
        }
    }
}

@Composable
fun MathSolverUI() {
    var userInput by remember { mutableStateOf(TextFieldValue()) }
    var result by remember { mutableStateOf("Result will appear here") }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Text(
            text = "Math Solver",
            style = MaterialTheme.typography.headlineLarge
        )

        BasicTextField(
            value = userInput,
            onValueChange = { userInput = it },
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp)
                .background(Color.LightGray),
            singleLine = true
        )

        Button(
            onClick = {
                result = solveMathProblem(userInput.text)
            },
            modifier = Modifier.fillMaxWidth()
        ) {
            Text(text = "Solve")
        }

        Text(
            text = result,
            style = MaterialTheme.typography.bodyLarge,
            color = Color.Black
        )
    }
}

fun solveMathProblem(input: String): String {
    // Placeholder for actual solving logic
    return try {
        val sanitizedInput = input.replace(" ", "") // Sanitize input
        val result = evalExpression(sanitizedInput)
        "Solution: $result"
    } catch (e: Exception) {
        "Error: Invalid input"
    }
}

fun evalExpression(expression: String): Double {
    // Basic evaluation logic
    val engine = javax.script.ScriptEngineManager().getEngineByName("rhino")
    return engine.eval(expression) as Double
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    MathSolverTheme {
        MathSolverUI()
    }
}
